====================
Regular Expression
====================

正規表現オブジェクトを作る
============================

::

  re.compile(正規表現のパターン[, フラグ])

  import re
  prog = re.compile(pattern)
  result = prog.match(string)


マッチする文字列をリストにして返す
====================================

::

  findall(処理対象とする文字列[, 開始位置[, 終了位置]]) 
  findall(正規表現パターン, 処理対象とする文字列[, フラグ])

  text = "He was carefully disguised but captured quickly by police." 
  re.findall(r"\w+ly", text)


マッチする場所が見つかるたびに文字列を分割する
================================================

::

  split(処理対象とする文字列[, maxsplit=0])
  split(正規表現パターン, 処理対象とする文字列[, maxsplit=0[, フラグ]])

  re.split('\W+', 'Words, words, words.')


マッチする場所が見つかるたびに文字列を置換する
================================================

::

  sub(置換用の文字列, 置換を行う文字列[, count=0]])
  sub(正規表現パターン, 置換用の文字列, 置換を行う文字列[, count=0[, フラグ]])

  re.sub(r'[a-z]+', 'xxx', 'I like orange')


マッチを検索してマッチオブジェクトを返す
==========================================

::

  search(処理対象とする文字列[, 開始位置[, 終了位置]])
  search(正規表現パターン, 処理対象とする文字列[, フラグ]])

  re.search(r'd', 'dog')


文字列の先頭だけを対象にマッチを探してマッチオブジェクトを返す
================================================================

::

  match(処理対象とする文字列[, 開始位置[, 終了位置]])
  match(正規表現パターン, 処理対象とする文字列[, フラグ])

  re.match(r'o', 'dog')


マッチが見つかったらマッチオブジェクトを返すイテレータを返す
==============================================================

::

  finditer(処理対象とする文字列[, 開始位置[, 終了位置]])
  finditer(正規表現パターン, 処理対象とする文字列[, フラグ])

  for m in re.finditer(r"\w+ly", text):
    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))


マッチに含まれるグループ、サブグループをタプルで返す
======================================================

::

  group([グループのインデックス, ...])

  m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
  m.group(0)
  m.group(1)


マッチに含まれるグループをすべて返す
======================================

::

  groups()

  m = re.match(r"(\d+)\.(\d+)", "24.1632")
  m.groups()
