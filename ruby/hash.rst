======
Hash
======

ハッシュを作る
================

::

  h1 = {"a" => "b", "c" => "d"}
  h2 = {a: "b", c: "d"}


ハッシュのデフォルト値を指定する
==================================

::

  h = Hash.new(1)


値を取り出す・設定する
========================

::

  h["R"] = "Ruby"
  p h["R"]


キーとして持っているかどうかを調べる
======================================

::

  p h.key?("a")
  p h.has_key?("a")
  p h.include?("a")
  p h.member?("z")


値として持っているかどうかを調べる
====================================

::

  p h.value?("b")
  p h.has_value?("b")


ハッシュの大きさを調べる
==========================

* 登録されているキーの数を調べる

::

  p h.length
  p h.size

* 何もキーが登録されていないかどうかを調べる

::

  p h.empty?


キーを指定して削除する
========================

::

  h.delete("R")


条件に当てはまるものだけを削除する
====================================

* 削除の条件に当てはまるものがなかったとき、delete_ifメソッドは元のハッシュを返し、reject!メソッドはnilを返す

::

  p h.delete_if{|key, value| key == "P"}
  p h.reject!{|key, value| key == "L"}


すべてのキーを配列に変換する
==============================

::

  h.keys


すべての値を配列に変換する
============================

::

  h.values


キーと値のペアを配列の配列に変換する
======================================

::

  h.to_a


ハッシュを空にする
====================

::

  h.clear
