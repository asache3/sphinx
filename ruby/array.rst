=======
Array
=======

配列の作り方
==============

::

  nums = [1, 2, 3, 4, 5]

  a = Array.new
  a = Array.new(5)
  # 引数を1つだけ指定した場合は、その数だけnilが格納された配列ができる
  a = Array.new(5, 0)
  # 引数を2つ指定した場合は、1つ目の引数が要素数、2つ目の引数が格納される値になる

  lang = %w(Ruby Perl Python Scheme Pike REBOL)


要素を取り出す
================

* インデックスがnの要素を1つ取り出す

::

  a[n]

* a[n]の要素からa[m]の要素までを並べた新しい配列を作って返す

::

  a[n..m]


* a[n]の要素からa[m-1]の要素までを並べた新しい配列を作って返す

::

  a[n...m]


* a[n]の要素からlen個の要素を取り出して新しい配列を作って返す

::

  a[n, len]


要素を置き換える
==================

* a[n]の要素を「item」に変更する

::

  a[n] = item

* 配列aの要素を逆順に並べ替える

::

  a.reverse
  a.reverse!

* 配列aの各要素を並べ替える

::

  a.sort
  a.sort!
  a.sort{|i, j| ...}
  a.sort!{|i, j| ...}


要素を挿入する
================

* インデックスがnの要素の前に挿入する

::

  a[n, 0] = [item1, item2]

* 配列aの先頭に新しい要素itemを付け加える

::

  a.unshift(item)

* 配列aの末尾に新しい要素itemを付け加える

::

  a << item
  a.push(item)

* 配列aに別の配列bを連結する

::

  a.concat(b)
  a+b


要素を取り除く
================

* 配列aの中から要素がnilのものを取り除く

::

  a.compact
  a.compact!

* 配列aから要素xを取り除く

::

  a.delete(x)


* 配列a[n]の要素を取り除く

::

  a.delete_at(n)

* 配列aから指定された部分を取り除き、取り除いた値を返す

::

  a.slice!(n)
  a.slice!(n..m)
  a.slice(n, len)


* 配列aの重複した要素を削除する

::

  a.uniq
  a.uniq!

* 配列aの先頭要素を取り除き、取り除いた値を返す

::

  a.shift

* 配列aの末尾要素を取り除き、取り除いた値を返す

::

  a.pop 

